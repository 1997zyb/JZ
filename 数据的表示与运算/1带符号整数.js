/*
原码：
（1）符号位 “0/1” 对应 “正/负”，剩余的数值位表示真值的绝对值；
（2）若机器字长是n+1位，带符号整数的原码表示范围是（-2^n-1~2^n-1）；
（3）真值0有两种形式，[+0]原=0,0000000;[-0]原=1,0000000；

    在日常生活中，通常用正号、负号来表示正数、负数，这种带“+”和“-”符号的数称为真值；
    在计算机中，通常将数的符号和数值一起编码，将数据的符号数字化，通常用“0”表示正数，
    用“1”表示负数。这种把符号“数字化”的数称为机器数。常用原码、补码、反码表示。


原码的缺点：符号位不能参与运算，需要设计更加复杂的硬件电路。
用补码表示真值，符号位可以参与运算。

原码转为补码：
（1）正数：原码（不变）反码（不变）补码
          原码 <————> 反码<————>补码

（2）负数：原码（符号位不变，数值位取反）反码（末位+1）补码
          原码 <————————————————————> 反码———————>补码

负数原码转补码（补码转原码）的快捷方式：
  从右向左找到第一个1，这个1左边的所有数值位按位取反（注意：是数值位，不包括符号位 ）

补码的减法：
  [A]补-[B]补 =
  A-B=A+(-B)
  求出-B的补码即可
  [B]补（全部位按位取反，末位+1）[-B]补
  [B]补 <————————————————————> [-B]补

  补码转为这个负数的补码的快捷方式：
  从右向左找到第一个1，这个1左边的所有位按位取反（注意：是所有位，包括符号位 ）



  原码、反码、补码比较（n+1bit）
    合法范围：
        带符号整数：原码：-（2^n-1）~ 2^n-1
        带符号整数：反码：-（2^n-1）~ 2^n-1
        带符号整数：补码：-（2^n）~ 2^n-1
        
    真值0的表示形式：
        带符号整数：原码：[+0]原 = 0,0000000；[-0]原 = 1,0000000
        带符号整数：反码：[+0]反 = 0,0000000；[-0]反 = 1,1111111
        带符号整数：补码：[0]补 = 0,0000000，只有这一种形式

  */