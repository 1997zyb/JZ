/*
  原码的算数移位：
    符号位保持不变，仅对数值位进行移位。
  
    右移：高位补0，低位舍弃；
      若舍弃的低位等于0，则相当于除以2，
      若舍弃的位不等于0，则会丢失精度。

    左移：低位补0，高位舍弃；
      若舍弃的低位等于0，则相当于乘以2，
      若舍弃的低位不等于0，则会出现严重误差，


  反码的算数移位：
    正数的反码与原码相同，因此对正数反码的移位运算也和原码一样
    负数右移：高位补1，低位舍弃；
    负数左移：低位补1，高位舍弃；

  
  补码的算术移位：
    正数的补码与原码相同，因此对正数补码的移位运算也和原码一样
    负数右移（同反码）：高位补1，低位舍弃；
    负数左移（同原码）：低位补0，高位舍弃；


    总结：
      正数：
          原码、补码、反码都添0；

      负数：
          原码添0；
          补码左移添0，右移添1；
          反码添1；




  逻辑移位：
    逻辑右移：高位补0，低位舍弃；
    逻辑左移：低位补0，高位舍弃；


  循环移位：
 */




  